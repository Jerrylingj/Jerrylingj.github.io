{"title":"线段树","uid":"a448dfd8ebb4408d1633f0dff8411f1c","slug":"线段树","date":"2024-09-26T05:05:40.000Z","updated":"2024-09-26T05:06:45.615Z","comments":true,"path":"api/articles/线段树.json","cover":"https://th.bing.com/th/id/R.fa3e78819de038c741076b8fddc6d160?rik=SKPOERrrNiyH%2fg&pid=ImgRaw&r=0","content":"<h1 id=\"线段树（Segment-Tree）\"><a href=\"#线段树（Segment-Tree）\" class=\"headerlink\" title=\"线段树（Segment Tree）\"></a>线段树（Segment Tree）</h1><h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>线段树是一种高效的数据结构，用于解决区间查询和更新问题。它能够在 (O(\\log n)) 时间复杂度内完成以下操作：</p>\n<ul>\n<li>查询区间和</li>\n<li>更新区间元素</li>\n</ul>\n<p>线段树特别适用于需要频繁处理区间查询和动态更新的场景。</p>\n<h2 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2><p>线段树通常使用完全二叉树的形式存储，节点表示数组的不同区间。假设原数组为 <code>A</code>，线段树为 <code>ST</code>，则每个节点 <code>ST[node]</code> 表示数组 <code>A</code> 的某个区间的值。</p>\n<h2 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h2><h3 id=\"1-建树操作\"><a href=\"#1-建树操作\" class=\"headerlink\" title=\"1. 建树操作\"></a>1. 建树操作</h3><p>构建线段树的过程如下：</p>\n<div class=\"language-python\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">python</span><pre class=\"shiki Aurora Future\" style=\"background-color: #202020\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #DA67DA\">def</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">build</span><span style=\"color: #505153\">(</span><span style=\"color: #61D0FF\">A</span><span style=\"color: #505153\">,</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">ST</span><span style=\"color: #505153\">,</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">node</span><span style=\"color: #505153\">,</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">start</span><span style=\"color: #505153\">,</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #61D0FF\">end</span><span style=\"color: #505153\">)</span><span style=\"color: #CCCCCC\">:</span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    </span><span style=\"color: #9569EC\">if</span><span style=\"color: #CCCCCC\"> start </span><span style=\"color: #9569EC\">==</span><span style=\"color: #CCCCCC\"> end</span><span style=\"color: #505153\">:</span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">        ST[node] </span><span style=\"color: #9569EC\">=</span><span style=\"color: #CCCCCC\"> A[start]  </span><span style=\"color: #65666B; font-style: italic\"># 叶子节点</span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">    </span><span style=\"color: #9569EC\">else</span><span style=\"color: #505153\">:</span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">        mid </span><span style=\"color: #9569EC\">=</span><span style=\"color: #CCCCCC\"> (start </span><span style=\"color: #9569EC\">+</span><span style=\"color: #CCCCCC\"> end) </span><span style=\"color: #9569EC\">//</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">2</span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">        build(A</span><span style=\"color: #505153\">,</span><span style=\"color: #CCCCCC\"> ST</span><span style=\"color: #505153\">,</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">2</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">*</span><span style=\"color: #CCCCCC\"> node </span><span style=\"color: #9569EC\">+</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">1</span><span style=\"color: #505153\">,</span><span style=\"color: #CCCCCC\"> start</span><span style=\"color: #505153\">,</span><span style=\"color: #CCCCCC\"> mid)  </span><span style=\"color: #65666B; font-style: italic\"># 构建左子树</span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">        build(A</span><span style=\"color: #505153\">,</span><span style=\"color: #CCCCCC\"> ST</span><span style=\"color: #505153\">,</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">2</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">*</span><span style=\"color: #CCCCCC\"> node </span><span style=\"color: #9569EC\">+</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">2</span><span style=\"color: #505153\">,</span><span style=\"color: #CCCCCC\"> mid </span><span style=\"color: #9569EC\">+</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">1</span><span style=\"color: #505153\">,</span><span style=\"color: #CCCCCC\"> end)  </span><span style=\"color: #65666B; font-style: italic\"># 构建右子树</span></span>\n<span class=\"line\"><span style=\"color: #CCCCCC\">        ST[node] </span><span style=\"color: #9569EC\">=</span><span style=\"color: #CCCCCC\"> ST[</span><span style=\"color: #9569EC\">2</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">*</span><span style=\"color: #CCCCCC\"> node </span><span style=\"color: #9569EC\">+</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">1</span><span style=\"color: #CCCCCC\">] </span><span style=\"color: #9569EC\">+</span><span style=\"color: #CCCCCC\"> ST[</span><span style=\"color: #9569EC\">2</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">*</span><span style=\"color: #CCCCCC\"> node </span><span style=\"color: #9569EC\">+</span><span style=\"color: #CCCCCC\"> </span><span style=\"color: #9569EC\">2</span><span style=\"color: #CCCCCC\">]  </span><span style=\"color: #65666B; font-style: italic\"># 计算节点值</span></span></code></pre></div>","text":"线段树（Segment Tree）概述线段树是一种高效的数据结构，用于解决区间查询和更新问题。它能够在 (O(\\log n)) 时间复杂度内完成以下操作： 查询...","permalink":"/post/线段树","photos":[],"count_time":{"symbolsCount":543,"symbolsTime":"1 mins."},"categories":[{"name":"数据结构","slug":"数据结构","count":5,"path":"api/categories/数据结构.json"}],"tags":[{"name":"线段树","slug":"线段树","count":1,"path":"api/tags/线段树.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E6%AE%B5%E6%A0%91%EF%BC%88Segment-Tree%EF%BC%89\"><span class=\"toc-text\">线段树（Segment Tree）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">概述</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">数据结构</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%BB%BA%E6%A0%91%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">1. 建树操作</span></a></li></ol></li></ol></li></ol>","author":{"name":"Jerry","slug":"blog-author","avatar":"https://th.bing.com/th/id/R.7a1adf834060c41d2d476af2a5e322fd?rik=N35%2fqYx%2fr4RSog&riu=http%3a%2f%2fimg.keaiming.com%2fuploads%2fallimg%2f2020090111%2fsvaseyx4m3v.jpg&ehk=EBywhQ9emNaCt5dbn%2b%2fxbUc5yK42H8b%2ffRDsZKdVI6I%3d&risl=&pid=ImgRaw&r=0","link":"/","description":"<strong>Keep a single spark to start a prairie fire.</strong>","socials":{"github":"https://github.com/Jerrylingj","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/2301_79143568?spm=1010.2135.3001.5343","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"并查集","uid":"c18469ab20e7b093d36b4a61728d07eb","slug":"并查集","date":"2024-09-26T05:08:52.000Z","updated":"2024-10-16T14:15:06.104Z","comments":true,"path":"api/articles/并查集.json","cover":"https://th.bing.com/th/id/R.fee079a5295cd84de146adf2ae8fb673?rik=ljoYC8Go8n1K3A&pid=ImgRaw&r=0","text":"并查集（Union-Find）概述并查集是一种高效的数据结构，以多棵树的形式存储，每棵树有一个被打上标记的根节点 主要用途： 合并两个集合 查询元素所属的集合 ...","permalink":"/post/并查集","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"数据结构","slug":"数据结构","count":5,"path":"api/categories/数据结构.json"}],"tags":[{"name":"并查集","slug":"并查集","count":1,"path":"api/tags/并查集.json"}],"author":{"name":"Jerry","slug":"blog-author","avatar":"https://th.bing.com/th/id/R.7a1adf834060c41d2d476af2a5e322fd?rik=N35%2fqYx%2fr4RSog&riu=http%3a%2f%2fimg.keaiming.com%2fuploads%2fallimg%2f2020090111%2fsvaseyx4m3v.jpg&ehk=EBywhQ9emNaCt5dbn%2b%2fxbUc5yK42H8b%2ffRDsZKdVI6I%3d&risl=&pid=ImgRaw&r=0","link":"/","description":"<strong>Keep a single spark to start a prairie fire.</strong>","socials":{"github":"https://github.com/Jerrylingj","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/2301_79143568?spm=1010.2135.3001.5343","juejin":"","customs":{}}}},"next_post":{"title":"基础数据结构","uid":"7ff326fdf142ec1868a8e7b87c57157c","slug":"基础数据结构","date":"2024-09-26T05:01:20.000Z","updated":"2024-10-16T14:19:47.502Z","comments":true,"path":"api/articles/基础数据结构.json","cover":"https://th.bing.com/th/id/R.abe96a9db2cbe50efe81eb818678d724?rik=zEX1OHssq3aT6w&pid=ImgRaw&r=0","text":"基础数据结构前言本文旨在帮助读者理解几种基本数据结构的原理,并能将数据结构充分的运用到算法题目当中 介绍的数据结构均会以数组的形式模拟 相对于传统用类/结构体的...","permalink":"/post/基础数据结构","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"数据结构","slug":"数据结构","count":5,"path":"api/categories/数据结构.json"}],"tags":[{"name":"链表","slug":"链表","count":2,"path":"api/tags/链表.json"},{"name":"栈","slug":"栈","count":2,"path":"api/tags/栈.json"},{"name":"队列","slug":"队列","count":2,"path":"api/tags/队列.json"},{"name":"堆","slug":"堆","count":1,"path":"api/tags/堆.json"}],"author":{"name":"Jerry","slug":"blog-author","avatar":"https://th.bing.com/th/id/R.7a1adf834060c41d2d476af2a5e322fd?rik=N35%2fqYx%2fr4RSog&riu=http%3a%2f%2fimg.keaiming.com%2fuploads%2fallimg%2f2020090111%2fsvaseyx4m3v.jpg&ehk=EBywhQ9emNaCt5dbn%2b%2fxbUc5yK42H8b%2ffRDsZKdVI6I%3d&risl=&pid=ImgRaw&r=0","link":"/","description":"<strong>Keep a single spark to start a prairie fire.</strong>","socials":{"github":"https://github.com/Jerrylingj","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/2301_79143568?spm=1010.2135.3001.5343","juejin":"","customs":{}}}}}