{"title":"数据结构与算法--week5","uid":"cb49df4bebbec542f5250fde4983b056","slug":"数据结构与算法-week5","date":"2024-10-10T08:30:29.000Z","updated":"2024-10-17T16:08:24.769Z","comments":true,"path":"api/articles/数据结构与算法-week5.json","cover":"https://th.bing.com/th/id/R.55f1966b615b41a131db9e993009d61d?rik=XCQ%2bJSCaFKXbZw&riu=http%3a%2f%2fimgs.aixifan.com%2flive%2f1483602004055%2f1483602004055.jpg&ehk=f5jovT%2fWC9O6Xgco6BJ%2ftpaARBfqBYNYQBtVAZUHIg8%3d&risl=&pid=ImgRaw&r=0","content":"<h3 id=\"1-栈\"><a href=\"#1-栈\" class=\"headerlink\" title=\"1.栈\"></a>1.栈</h3><details class=\"custom-details\">\n<summary>题目</summary>\n<p><p><strong>题目描述</strong></p>\n<p>给定一个栈S和如下4种操作。</p>\n<ol>\n<li>S.push(X): 将整数X入栈S。</li>\n<li>S.pop(): 如果栈S不为空，弹出栈顶元素。</li>\n<li>S.top(): 输出栈顶元素（如果栈为空，输出-1）。</li>\n<li>S.min(): 输出栈S中的最小元素（如果栈为空，输出-1）。</li>\n</ol>\n<p><strong>输入描述</strong></p>\n<p>输入包括多组数据。<br>对于每组数据，第一行为整数<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.357ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 600 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container>  (<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.312ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"14.179ex\" height=\"1.819ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -666 6267.1 804\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(777.8,0)\"><path data-c=\"2264\" d=\"M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1833.6,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2711.3,0)\"><path data-c=\"2264\" d=\"M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(3767.1,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(1000,0)\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(1500,0)\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(2000,0)\"></path></g></g></g></svg></mjx-container> )。<br>接下来n行对应n个操作，每行的第一个整数为操作类型，如果操作类型为0，接下来还包括一个整数 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.928ex\" height=\"1.545ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -683 852 683\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D44B\" d=\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\"></path></g></g></g></svg></mjx-container>  (<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.312ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"12.343ex\" height=\"2.267ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -864 5455.7 1002\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(777.8,0)\"><path data-c=\"2264\" d=\"M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1833.6,0)\"><path data-c=\"1D44B\" d=\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2963.3,0)\"><path data-c=\"3C\" d=\"M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(4019.1,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1033,393.1) scale(0.707)\"><path data-c=\"38\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\"></path></g></g></g></g></svg></mjx-container> )。</p>\n<p><strong>输出描述</strong></p>\n<p>对于每组数据的操作2和3，每行输出一个整数。</p>\n<p><strong>输入样例</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10</span><br><span class=\"line\">0 0</span><br><span class=\"line\">1</span><br><span class=\"line\">0 2</span><br><span class=\"line\">0 0</span><br><span class=\"line\">0 0</span><br><span class=\"line\">3</span><br><span class=\"line\">1</span><br><span class=\"line\">3</span><br><span class=\"line\">0 5</span><br><span class=\"line\">2</span><br><span class=\"line\"></span><br><span class=\"line\">12</span><br><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">0 2</span><br><span class=\"line\">1</span><br><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">0 4</span><br><span class=\"line\">1</span><br><span class=\"line\">0 1</span><br><span class=\"line\">0 4</span><br><span class=\"line\">0 0</span><br><span class=\"line\"></span><br><span class=\"line\">23</span><br><span class=\"line\">0 0</span><br><span class=\"line\">3</span><br><span class=\"line\">3</span><br><span class=\"line\">0 4</span><br><span class=\"line\">0 5</span><br><span class=\"line\">1</span><br><span class=\"line\">3</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">0 0</span><br><span class=\"line\">0 4</span><br><span class=\"line\">2</span><br><span class=\"line\">0 6</span><br><span class=\"line\">0 2</span><br><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">0 0</span><br><span class=\"line\">2</span><br><span class=\"line\">1</span><br><span class=\"line\">0 3</span><br><span class=\"line\">0 8</span><br><span class=\"line\">0 9</span><br><span class=\"line\">0 8</span><br><span class=\"line\"></span><br><span class=\"line\">24</span><br><span class=\"line\">1</span><br><span class=\"line\">0 2</span><br><span class=\"line\">0 0</span><br><span class=\"line\">0 7</span><br><span class=\"line\">0 6</span><br><span class=\"line\">0 8</span><br><span class=\"line\">0 5</span><br><span class=\"line\">0 2</span><br><span class=\"line\">3</span><br><span class=\"line\">0 5</span><br><span class=\"line\">3</span><br><span class=\"line\">0 0</span><br><span class=\"line\">2</span><br><span class=\"line\">0 3</span><br><span class=\"line\">0 4</span><br><span class=\"line\">2</span><br><span class=\"line\">0 3</span><br><span class=\"line\">0 0</span><br><span class=\"line\">3</span><br><span class=\"line\">0 4</span><br><span class=\"line\">1</span><br><span class=\"line\">0 3</span><br><span class=\"line\">0 9</span><br><span class=\"line\">3</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>输出样例</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0</span><br><span class=\"line\">0</span><br><span class=\"line\">5</span><br><span class=\"line\">-1</span><br><span class=\"line\">-1</span><br><span class=\"line\">-1</span><br><span class=\"line\">0</span><br><span class=\"line\">0</span><br><span class=\"line\">0</span><br><span class=\"line\">4</span><br><span class=\"line\">0</span><br><span class=\"line\">4</span><br><span class=\"line\">6</span><br><span class=\"line\">0</span><br><span class=\"line\">0</span><br><span class=\"line\">0</span><br><span class=\"line\">0</span><br><span class=\"line\">4</span><br><span class=\"line\">0</span><br><span class=\"line\">0</span><br></pre></td></tr></table></figure>\n\n</p>\n</details>\n<p>吐槽一下这个题目。。。。原本的题目把多组输入放在多个代码框里，也不说明白都在一个输入样例里，还以为要输入组数，又发现根本就没给组数，结果最后是读到<code>n</code>就要处理</p>\n<p><strong>思路</strong></p>\n<p>直接处理栈的4个操作即可</p>\n<ul>\n<li><p>用<code>STL</code>的<code>stack</code>报<code>MLE</code></p>\n<img src=\"./数据结构与算法-week5/image-20241010152450134.png\" alt=\"image-20241010152450134\" style=\"margin: auto;\">\n</li>\n<li><p>这时候就体现出<strong>数组模拟栈</strong>的优势了，可以看看我之前写的这个<a href=\"https://jerrylingj.top/post/基础数据结构\" target=\"_blank\"><strong>基础数据结构—栈</strong> </a></p>\n</li>\n</ul>\n<p> <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"6.324ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 2795 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(469,0)\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(830,0)\"><path data-c=\"1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1351,0)\"><path data-c=\"5B\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1629,0)\"><path data-c=\"1D441\" d=\"M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2517,0)\"><path data-c=\"5D\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"></path></g></g></g></svg></mjx-container> ：存栈</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.633ex\" height=\"1.441ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -626 722 637\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(361,0)\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path></g></g></g></svg></mjx-container>：存栈顶编号（等价于地址）</p>\n<p><strong>代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n, op, x;</span><br><span class=\"line\"><span class=\"type\">int</span> stk[N];</span><br><span class=\"line\"><span class=\"type\">int</span> tt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (cin &gt;&gt; n)</span><br><span class=\"line\">\t{</span><br><span class=\"line\">\t\ttt = <span class=\"number\">0</span>; <span class=\"comment\">// 重置</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (n--)</span><br><span class=\"line\">\t\t{</span><br><span class=\"line\">\t\t\tcin &gt;&gt; op;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (op == <span class=\"number\">0</span>) <span class=\"comment\">// push</span></span><br><span class=\"line\">\t\t\t{</span><br><span class=\"line\">\t\t\t\tcin &gt;&gt; x;</span><br><span class=\"line\">\t\t\t\tstk[tt++] = x;</span><br><span class=\"line\">\t\t\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (op == <span class=\"number\">1</span>)\t<span class=\"comment\">// pop</span></span><br><span class=\"line\">\t\t\t{</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (tt) tt--;</span><br><span class=\"line\">\t\t\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (op == <span class=\"number\">2</span>)  <span class=\"comment\">// top</span></span><br><span class=\"line\">\t\t\t{</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (tt) cout &lt;&lt; stk[tt - <span class=\"number\">1</span>] &lt;&lt; endl;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> cout &lt;&lt; <span class=\"number\">-1</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"comment\">// min </span></span><br><span class=\"line\">\t\t\t{</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!tt)</span><br><span class=\"line\">\t\t\t\t{</span><br><span class=\"line\">\t\t\t\t\tcout &lt;&lt; <span class=\"number\">-1</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"type\">int</span> res = <span class=\"number\">1e8</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; tt; i++)</span><br><span class=\"line\">\t\t\t\t\tres = <span class=\"built_in\">min</span>(res, stk[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\tcout &lt;&lt; res &lt;&lt; endl;</span><br><span class=\"line\">\t\t\t}</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t}</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"2-有效的括号\"><a href=\"#2-有效的括号\" class=\"headerlink\" title=\"2.有效的括号\"></a>2.有效的括号</h3><details class=\"custom-details\">\n<summary>题目</summary>\n<p><strong>题目描述</strong></p>\n<p>给定一个只包括 <code>'('，')'，'{'，'}'，'['，']'</code> 的字符串 s ，判断字符串是否有效。</p>\n<p>有效字符串需满足：</p>\n<ul>\n<li>左括号必须用相同类型的右括号闭合。</li>\n<li>括号必须以正确的顺序闭合。</li>\n</ul>\n<p><strong>示例输入</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">()</span><br><span class=\"line\">()[]{}</span><br><span class=\"line\">(]</span><br><span class=\"line\">([)]</span><br><span class=\"line\">{[]}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>示例输出</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>要求</strong></p>\n<p>实现头文件 <code>valid_parentheses.h</code> 中的 <code>isValid</code> 函数。</p>\n<p><strong>valid_parentheses.h</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> VALID_PARENTHESES_H_</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> VALID_PARENTHESES_H_</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isValid</span><span class=\"params\">(string s)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">// !VALID_PARENTHESES_H_</span></span></span><br></pre></td></tr></table></figure>\n\n\n</details>\n<p><strong>思路</strong></p>\n<ul>\n<li><p>这个题目大一程设已经做过很多遍了，一个个遍历字符串，左括号入栈，右括号判断是否匹配</p>\n</li>\n<li><p>注意最后要判断是否全部匹配完毕</p>\n</li>\n<li><p>这里无脑<code>if-else</code>竟然还要扣分。。。我后面改成<code>map</code>提前存好匹配了</p>\n</li>\n</ul>\n<img src=\"./数据结构与算法-week5/image-20241010153520536.png\" alt=\"image-20241010153520536\" style=\"margin: auto;\">\n\n\n\n<p><strong>代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">\"valid_parentheses.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isValid</span><span class=\"params\">(string s)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>{  </span><br><span class=\"line\">    stack&lt;<span class=\"type\">char</span>&gt; stk; \t<span class=\"comment\">// 使用 char 类型的栈，因为我们存储的是字符  </span></span><br><span class=\"line\">  \t</span><br><span class=\"line\">    map&lt;<span class=\"type\">char</span>, <span class=\"type\">char</span>&gt; mp; <span class=\"comment\">// 预处理匹配</span></span><br><span class=\"line\">    mp[<span class=\"string\">'('</span>] = <span class=\"string\">')'</span>;</span><br><span class=\"line\">    mp[<span class=\"string\">'['</span>] = <span class=\"string\">']'</span>;</span><br><span class=\"line\">    mp[<span class=\"string\">'{'</span>] = <span class=\"string\">'}'</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; s.<span class=\"built_in\">size</span>(); i ++ )</span><br><span class=\"line\">    {</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">'('</span> || s[i] == <span class=\"string\">'['</span> || s[i] == <span class=\"string\">'{'</span>) stk.<span class=\"built_in\">push</span>(s[i]);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        {</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (stk.<span class=\"built_in\">empty</span>()) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; \t\t\t <span class=\"comment\">// 栈空</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s[i] != mp[stk.<span class=\"built_in\">top</span>()]) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; <span class=\"comment\">// 不匹配</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> stk.<span class=\"built_in\">pop</span>();\t\t\t\t\t\t\t <span class=\"comment\">// 匹配,pop</span></span><br><span class=\"line\">        }</span><br><span class=\"line\">        \t</span><br><span class=\"line\">    }</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> stk.<span class=\"built_in\">empty</span>();\t<span class=\"comment\">// 判断是否匹配完毕  </span></span><br><span class=\"line\">}  </span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"3-移除K位数字\"><a href=\"#3-移除K位数字\" class=\"headerlink\" title=\"3.移除K位数字\"></a>3.移除K位数字</h3><details class=\"custom-details\">\n<summary>题目</summary>\n<p><p><strong>题目描述</strong></p>\n<p>给你一个以字符串表示的非负整数 <code>num</code> 和一个整数 <code>k</code> ，移除这个数中的 <code>k</code> 位数字，使得剩下的数字最小。请你以字符串形式返回这个最小的数字。</p>\n<p><strong>示例 1</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：num = \"1432219\", k = 3</span><br><span class=\"line\">输出：\"1219\"</span><br><span class=\"line\">解释：移除掉三个数字 4, 3, 和 2 形成一个新的最小的数字 1219 。</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 2</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：num = \"10200\", k = 1</span><br><span class=\"line\">输出：\"200\"</span><br><span class=\"line\">解释：移掉首位的 1 剩下的数字为 200. 注意输出不能有任何前导零。</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例 3</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：num = \"10\", k = 2</span><br><span class=\"line\">输出：\"0\"</span><br><span class=\"line\">解释：从原数字移除所有的数字，剩余为空就是 0 。</span><br></pre></td></tr></table></figure>\n\n<p><strong>要求</strong></p>\n<p>实现头文件 <code>remove_k_digits.h</code> 中的 <code>removeKdigits</code> 函数。</p>\n<p>提示：</p>\n<ul>\n<li><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.464ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"26.54ex\" height=\"2.419ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -864 11730.9 1069\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(777.8,0)\"><path data-c=\"2264\" d=\"M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1833.6,0)\"><path data-c=\"1D458\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2632.3,0)\"><path data-c=\"2264\" d=\"M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3688.1,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4288.1,0)\"><path data-c=\"1D462\" d=\"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4860.1,0)\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(5738.1,0)\"><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(6182.8,0)\"><path data-c=\"1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(6480.8,0)\"><path data-c=\"1D452\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(6946.8,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(7546.8,0)\"><path data-c=\"1D454\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(8023.8,0)\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(8384.8,0)\"><path data-c=\"210E\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(9238.6,0)\"><path data-c=\"2264\" d=\"M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(10294.3,0)\"><g data-mml-node=\"mn\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g><g data-mml-node=\"mn\" transform=\"translate(1033,393.1) scale(0.707)\"><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"></path></g></g></g></g></svg></mjx-container></li>\n<li><code>num</code> 仅由若干位数字（0 - 9）组成</li>\n<li>除了 0 本身之外，<code>num</code> 不含任何前导零</li>\n</ul>\n<p><strong>remove_k_digits.h</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> REMOVE_K_DIGITS_H_</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> REMOVE_K_DIGITS_H_</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">removeKdigits</span><span class=\"params\">(string num, <span class=\"type\">int</span> k)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">// !REMOVE_K_DIGITS_H_</span></span></span><br></pre></td></tr></table></figure>\n\n</p>\n</details>\n<p><strong>思路</strong></p>\n<img src=\"./数据结构与算法-week5/微信图片_20241011084455.png\" alt=\"微信图片_20241011084455\" style=\"margin: auto;\">\n\n<img src=\"./数据结构与算法-week5/微信图片_20241011084458.png\" alt=\"微信图片_20241011084458\" style=\"margin: auto;\">\n\n<p><strong>代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">\"remove_k_digits.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 维护栈,判断是否需要删除</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">stack_new</span><span class=\"params\">(stack&lt;<span class=\"type\">char</span>&gt;&amp; s, <span class=\"type\">char</span> c, <span class=\"type\">int</span> &amp;k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (k &amp;&amp; !s.<span class=\"built_in\">empty</span>() &amp;&amp; s.<span class=\"built_in\">top</span>() &gt; c)</span><br><span class=\"line\">    {</span><br><span class=\"line\">        <span class=\"comment\">// 前一个大于后一个,需要删,可以删</span></span><br><span class=\"line\">        s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        k--;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">removedigits</span><span class=\"params\">(string num, <span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num.<span class=\"built_in\">size</span>() == k) <span class=\"keyword\">return</span> <span class=\"string\">\"0\"</span>;\t<span class=\"comment\">// 全部删除 </span></span><br><span class=\"line\"></span><br><span class=\"line\">    stack&lt;<span class=\"type\">char</span>&gt; s;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; num.<span class=\"built_in\">size</span>(); i++)</span><br><span class=\"line\">    {</span><br><span class=\"line\">        <span class=\"built_in\">stack_new</span>(s, num[i], k);        <span class=\"comment\">// 专门分开写一个函数不然要扣分。。。。</span></span><br><span class=\"line\">        s.<span class=\"built_in\">push</span>(num[i]);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// k没有用完</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (k &amp;&amp; s.<span class=\"built_in\">size</span>())</span><br><span class=\"line\">    {</span><br><span class=\"line\">        s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        k--;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 存储结果</span></span><br><span class=\"line\">    string res;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (s.<span class=\"built_in\">size</span>())</span><br><span class=\"line\">    {</span><br><span class=\"line\">        res = s.<span class=\"built_in\">top</span>() + res;</span><br><span class=\"line\">        s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 删除前导0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (res.<span class=\"built_in\">size</span>() &amp;&amp; res[<span class=\"number\">0</span>] == <span class=\"string\">'0'</span>)</span><br><span class=\"line\">        res.<span class=\"built_in\">erase</span>(res.<span class=\"built_in\">begin</span>());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"4-简单计算器\"><a href=\"#4-简单计算器\" class=\"headerlink\" title=\"4.简单计算器\"></a>4.简单计算器</h3><details class=\"custom-details\">\n<summary>题目</summary>\n<p><strong>题目描述</strong></p>\n<p>给定一个四则运算的表达式的字符串，计算表达式最终的结果。</p>\n<p>提示，输入不会出现除0，输入的数字在-1000000到100000之间，表示负数时会用括号消除歧义。</p>\n<p><strong>输入</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">60+(3*2+1)</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">67</span><br></pre></td></tr></table></figure>\n\n\n</details>\n<p><strong>思路</strong></p>\n<p>和国庆的作业题差不多，但是这里要处理负数的情况</p>\n<p>和数据结构课不一样的是，我将这里详细讲解一下为什么处理表达式运算可以用栈实现，而不是直接一上来就告诉结论，详细思路如下</p>\n<img src=\"./数据结构与算法-week5/微信图片_20241010232205.jpg\" alt=\"微信图片_20241010232205\" style=\"margin: auto;\">\n\n<p>由此，在已知<strong>表达式树</strong>的情况下，计算表达式的值的伪代码大致如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">char</span> u)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">\t<span class=\"comment\">// 递归终点</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">isdigit</span>(u)) <span class=\"keyword\">return</span> u - <span class=\"string\">'0'</span>; <span class=\"comment\">// 如果已经到达底部了,开始向上回溯把数字往上传</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"type\">int</span> l = <span class=\"built_in\">dfs</span>(left), r = <span class=\"built_in\">dfs</span>(right); <span class=\"comment\">// 求左数和右数的值,假设已经知道了树的结构</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 计算当前节点的值并向上返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (u == <span class=\"string\">'+'</span>) <span class=\"keyword\">return</span> l + r;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (u == <span class=\"string\">'-'</span>) <span class=\"keyword\">return</span> l - r;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (u == <span class=\"string\">'*'</span>) <span class=\"keyword\">return</span> l * r;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (u == <span class=\"string\">'/'</span>) <span class=\"keyword\">return</span> l / r;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n\n<img src=\"./数据结构与算法-week5/微信图片_20241011000922.png\" alt=\"微信图片_20241011000922\" style=\"margin: auto;\">\n\n<img src=\"./数据结构与算法-week5/微信图片_20241011000924.png\" alt=\"微信图片_20241011000924\" style=\"margin: auto;\">\n\n<img src=\"./数据结构与算法-week5/微信图片_20241011000925.png\" alt=\"微信图片_20241011000925\" style=\"margin: auto;\">\n\n<img src=\"./数据结构与算法-week5/微信图片_20241011000926.png\" alt=\"微信图片_20241011000926\" style=\"margin: auto;\">\n\n<p><strong>完整代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unordered_map&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\">string str;  \t <span class=\"comment\">// 表达式</span></span><br><span class=\"line\">stack&lt;<span class=\"type\">int</span>&gt; num;  <span class=\"comment\">// 操作数</span></span><br><span class=\"line\">stack&lt;<span class=\"type\">char</span>&gt; ops; <span class=\"comment\">// 操作符</span></span><br><span class=\"line\">unordered_map&lt;<span class=\"type\">char</span>, <span class=\"type\">int</span>&gt; pr = { {<span class=\"string\">'+'</span>, <span class=\"number\">1</span>}, {<span class=\"string\">'-'</span>, <span class=\"number\">1</span>}, {<span class=\"string\">'*'</span>, <span class=\"number\">2</span>}, {<span class=\"string\">'/'</span>, <span class=\"number\">2</span>} }; <span class=\"comment\">//运算符优先级</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">eval</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">\t<span class=\"comment\">// 进行一次运算</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> b = num.<span class=\"built_in\">top</span>(); num.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t<span class=\"type\">int</span> a = num.<span class=\"built_in\">top</span>(); num.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t<span class=\"type\">char</span> c = ops.<span class=\"built_in\">top</span>(); ops.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> res;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (c == <span class=\"string\">'+'</span>) res = a + b;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (c == <span class=\"string\">'-'</span>) res = a - b;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (c == <span class=\"string\">'*'</span>) res = a * b;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> res = a / b;</span><br><span class=\"line\">\tnum.<span class=\"built_in\">push</span>(res);  \t\t<span class=\"comment\">// 结果存回去</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">\tcin &gt;&gt; str;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; str.<span class=\"built_in\">size</span>(); i++)</span><br><span class=\"line\">\t{</span><br><span class=\"line\">\t\t<span class=\"type\">char</span> c = str[i];</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">isdigit</span>(c))</span><br><span class=\"line\">\t\t{</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 数字直接入栈,注意处理多位</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> res = <span class=\"number\">0</span>, j = i;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (<span class=\"built_in\">isdigit</span>(str[j]))</span><br><span class=\"line\">\t\t\t\tres = res * <span class=\"number\">10</span> + str[j++] - <span class=\"string\">'0'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\ti = j - <span class=\"number\">1</span>;\t\t\t<span class=\"comment\">// isdigit(j) = false</span></span><br><span class=\"line\">\t\t\tnum.<span class=\"built_in\">push</span>(res);\t\t<span class=\"comment\">// 数字入栈</span></span><br><span class=\"line\">\t\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (c == <span class=\"string\">'('</span>) ops.<span class=\"built_in\">push</span>(c);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (c == <span class=\"string\">')'</span>)</span><br><span class=\"line\">\t\t{</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 计算至左括号</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (ops.<span class=\"built_in\">size</span>() &amp;&amp; ops.<span class=\"built_in\">top</span>() != <span class=\"string\">'('</span>) <span class=\"built_in\">eval</span>(); <span class=\"comment\">// 作一次运算</span></span><br><span class=\"line\">\t\t\tops.<span class=\"built_in\">pop</span>();\t\t\t\t\t\t <span class=\"comment\">// 弹出左括号</span></span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (c == <span class=\"string\">'-'</span> &amp;&amp; (!ops.<span class=\"built_in\">size</span>() || ops.<span class=\"built_in\">top</span>() == <span class=\"string\">'('</span>))</span><br><span class=\"line\">\t\t{</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 负号的情况,前面有括号或者在最前面</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> res = <span class=\"number\">0</span>, j = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (<span class=\"built_in\">isdigit</span>(str[j]))</span><br><span class=\"line\">\t\t\t\tres = res * <span class=\"number\">10</span> + str[j++] - <span class=\"string\">'0'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\ti = j - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tnum.<span class=\"built_in\">push</span>(-res);\t\t<span class=\"comment\">// 数字入栈</span></span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t{</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 正常运算符,判断优先级</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 小于等于的上放,回溯求值</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (ops.<span class=\"built_in\">size</span>() &amp;&amp; pr[ops.<span class=\"built_in\">top</span>()] &gt;= pr[c]) <span class=\"built_in\">eval</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 大于之后压入栈</span></span><br><span class=\"line\">\t\t\tops.<span class=\"built_in\">push</span>(c);</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 计算剩余的数,返回结果</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (ops.<span class=\"built_in\">size</span>()) <span class=\"built_in\">eval</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; num.<span class=\"built_in\">top</span>() &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n\n","feature":true,"text":"1.栈 题目 题目描述 给定一个栈S和如下4种操作。 S.push(X): 将整数X入栈S。 S.pop(): 如果栈S不为空，弹出栈顶元素。 S.top():...","permalink":"/post/数据结构与算法-week5","photos":[],"count_time":{"symbolsCount":"6.4k","symbolsTime":"6 mins."},"categories":[{"name":"算法","slug":"算法","count":19,"path":"api/categories/算法.json"}],"tags":[{"name":"栈","slug":"栈","count":3,"path":"api/tags/栈.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E6%A0%88\"><span class=\"toc-text\">1.栈</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7\"><span class=\"toc-text\">2.有效的括号</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E7%A7%BB%E9%99%A4K%E4%BD%8D%E6%95%B0%E5%AD%97\"><span class=\"toc-text\">3.移除K位数字</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E7%AE%80%E5%8D%95%E8%AE%A1%E7%AE%97%E5%99%A8\"><span class=\"toc-text\">4.简单计算器</span></a></li></ol>","author":{"name":"Jerry","slug":"blog-author","avatar":"https://th.bing.com/th/id/R.7a1adf834060c41d2d476af2a5e322fd?rik=N35%2fqYx%2fr4RSog&riu=http%3a%2f%2fimg.keaiming.com%2fuploads%2fallimg%2f2020090111%2fsvaseyx4m3v.jpg&ehk=EBywhQ9emNaCt5dbn%2b%2fxbUc5yK42H8b%2ffRDsZKdVI6I%3d&risl=&pid=ImgRaw&r=0","link":"/","description":"<strong>Keep a single spark to start a prairie fire.</strong>","socials":{"github":"https://github.com/Jerrylingj","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/2301_79143568?spm=1010.2135.3001.5343","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{},"next_post":{"title":"动态规划--状态压缩DP","uid":"52c3d43467d5b3dc99c6cd71203838c1","slug":"动态规划-状态压缩DP","date":"2024-10-06T15:58:38.000Z","updated":"2024-10-08T07:36:13.595Z","comments":true,"path":"api/articles/动态规划-状态压缩DP.json","cover":"https://file.moyublog.com/free_wallpapers_files/kdxevforc0m.jpg","text":"状态压缩DP引入在某些问题中，状态数非常多，用暴力搜索的方法（复杂度 ）无法解决， 利用二进制数的思想，把每个状态用一个二进制数来表示，每一位的0/1代表某个点...","permalink":"/post/动态规划-状态压缩DP","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"算法","slug":"算法","count":19,"path":"api/categories/算法.json"}],"tags":[{"name":"动态规划","slug":"动态规划","count":5,"path":"api/tags/动态规划.json"},{"name":"状态压缩DP","slug":"状态压缩DP","count":1,"path":"api/tags/状态压缩DP.json"},{"name":"lowbit","slug":"lowbit","count":2,"path":"api/tags/lowbit.json"}],"author":{"name":"Jerry","slug":"blog-author","avatar":"https://th.bing.com/th/id/R.7a1adf834060c41d2d476af2a5e322fd?rik=N35%2fqYx%2fr4RSog&riu=http%3a%2f%2fimg.keaiming.com%2fuploads%2fallimg%2f2020090111%2fsvaseyx4m3v.jpg&ehk=EBywhQ9emNaCt5dbn%2b%2fxbUc5yK42H8b%2ffRDsZKdVI6I%3d&risl=&pid=ImgRaw&r=0","link":"/","description":"<strong>Keep a single spark to start a prairie fire.</strong>","socials":{"github":"https://github.com/Jerrylingj","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/2301_79143568?spm=1010.2135.3001.5343","juejin":"","customs":{}}},"feature":true}}