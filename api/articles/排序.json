{"title":"排序","uid":"2a1893ca085cc0c5b7d1cdcd8c0b1c91","slug":"排序","date":"2024-09-26T02:05:17.000Z","updated":"2024-10-16T14:20:03.526Z","comments":true,"path":"api/articles/排序.json","cover":"https://th.bing.com/th/id/R.ec013c54a665bb6b38fb0390e2987b80?rik=3OfrTtHdScARiQ&riu=http%3a%2f%2fqqpublic.qpic.cn%2fqq_public%2f0%2f0-595029769-EC013C54A665BB6B38FB0390E2987B80%2f0%3ffmt%3djpg%26size%3d101%26h%3d506%26w%3d900%26ppv%3d1.jpg&ehk=YrecwkKXnI1%2b2ARpQFDbvv%2bjFB66bRmEzr9q134unNk%3d&risl=&pid=ImgRaw&r=0","content":"<h1 id=\"1-快速排序\"><a href=\"#1-快速排序\" class=\"headerlink\" title=\"1.快速排序\"></a>1.快速排序</h1><p>对数组 <code>q</code> 在下标 <code>l</code> 到 <code>r</code> 的范围内进行升序排序。</p>\n<p>快速排序通过多次的比较和交换，在一趟排序之中确定好选择的基准应该在的位置。这个位置满足的条件是：</p>\n<ol>\n<li>它的左边的数都<strong>小于</strong>它。</li>\n<li>它的右边的数都<strong>大于</strong>它。</li>\n</ol>\n<p>之后对左右的区间进行递归排序，最后所有的数都位于它应该在的地方，排序完成。</p>\n<h2 id=\"排序思路\"><a href=\"#排序思路\" class=\"headerlink\" title=\"排序思路\"></a>排序思路</h2><ol>\n<li><p><strong>确定分界点 <code>x</code></strong> ：</p>\n<ul>\n<li><p>选择 <code>x</code> 为 <code>q[l]</code>、<code>q[r]</code> 或 <code>q[(l + r) / 2]</code> 中的任意一个。</p>\n<p><em>ps:</em> <code>x</code>可以任取，一般取为<code>q[ l + r &gt;&gt; 1]</code></p>\n</li>\n</ul>\n</li>\n<li><p><strong>调整数组</strong>：</p>\n<ul>\n<li><code>q[l]</code> 到 <code>q[x-1]</code> 中的元素都小于 <code>x</code>，</li>\n<li><code>q[x+1]</code> 到 <code>q[r]</code> 中的元素都大于或等于 <code>x</code>。</li>\n</ul>\n</li>\n<li><p><strong>递归处理子区间</strong>：</p>\n</li>\n</ol>\n<h2 id=\"核心操作\"><a href=\"#核心操作\" class=\"headerlink\" title=\"核心操作\"></a>核心操作</h2><p><strong>双指针</strong>：</p>\n<ul>\n<li>设置两个指针，<code>i 和 j</code>，分别指向当前区间的头和尾。</li>\n<li>两个指针向中间移动，遇到<strong>不满足条件的元素</strong>(需要交换)时停止。</li>\n<li>交换这两个指针指向的元素，然后继续移动指针，直到它们相遇。</li>\n</ul>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ul>\n<li>在<strong>判断条件时</strong>要确保准确，避免死循环→注意前面的最前面的<code>return</code>判断</li>\n<li>确定好每次递归的区间，确保排序的完整性。</li>\n<li><strong>时间复杂度</strong><code>O(nlogn)</code></li>\n</ul>\n<h3 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">quick_sort</span><span class=\"params\">(<span class=\"type\">int</span> q[], <span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (l &gt;= r) <span class=\"keyword\">return</span>; <span class=\"comment\">// 排序完成,返回</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> x = q[l + r &gt;&gt; <span class=\"number\">1</span>], i = l - <span class=\"number\">1</span>, j = r + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (i &lt; j)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 当两个指针未相遇时,一直移动直至需要交换</span></span><br><span class=\"line\">    \t<span class=\"keyword\">do</span> i ++; <span class=\"keyword\">while</span>(q[i] &lt; x);</span><br><span class=\"line\">    \t<span class=\"keyword\">do</span> j --; <span class=\"keyword\">while</span>(q[j] &gt; x);</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span> (i &lt; j) <span class=\"built_in\">swap</span>(q[i], q[j]); <span class=\"comment\">// 交换</span></span><br><span class=\"line\">    \t</span><br><span class=\"line\">    \t<span class=\"comment\">// 分治子区间</span></span><br><span class=\"line\">    \t<span class=\"built_in\">quick_sort</span>(q, l, j);</span><br><span class=\"line\">    \t<span class=\"built_in\">quick_sort</span>(q, j + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>直接理解可能还是有点抽象，也许你会觉得好像寻找分界点让左小又大能有一定的排序作用，但是get不到为什么这样一通操作能保证全体点都严格排好序，找到了张动态图给大家参考一下~</strong></p>\n<p><img src=\"https://cdn.acwing.com/media/article/image/2021/08/09/15628_b9430878f9-%E5%BF%AB%E9%80%9F.gif\" alt=\"快速.gif\"></p>\n<h1 id=\"2-归并排序\"><a href=\"#2-归并排序\" class=\"headerlink\" title=\"2.归并排序\"></a>2.归并排序</h1><p>对数组 <code>q</code> 在下标 <code>l</code> 到 <code>r</code> 的范围内进行升序排序。</p>\n<h2 id=\"核心思想\"><a href=\"#核心思想\" class=\"headerlink\" title=\"核心思想\"></a>核心思想</h2><p><strong>分治</strong></p>\n<h2 id=\"排序思路-1\"><a href=\"#排序思路-1\" class=\"headerlink\" title=\"排序思路\"></a>排序思路</h2><ol>\n<li><p><strong>确定分界点</strong><code>mid</code>：</p>\n<ul>\n<li><code>mid = (l + r) / 2</code>，将数组分为两部分。</li>\n</ul>\n</li>\n<li><p><strong>递归排序</strong>：</p>\n<ul>\n<li>递归地对 <code>q[l] ~ q[mid]</code> 和 <code>q[mid+1] ~ q[r]</code> 两部分进行排序，<strong>此时两部分已各自有序→当前需要进行的操作仅为归并已经排好的两段区间</strong></li>\n</ul>\n</li>\n<li><p><strong>合并</strong>：</p>\n</li>\n</ol>\n<h2 id=\"核心操作-1\"><a href=\"#核心操作-1\" class=\"headerlink\" title=\"核心操作\"></a>核心操作</h2><p><strong>双指针</strong>：</p>\n<ul>\n<li>指针分别指向两部分的<strong>头部</strong>。</li>\n<li>比较两部分当前指针指向的元素，将<strong>较小的复制到一个新的数组</strong>中。</li>\n<li>当其中一部分复制完后，将另一部分剩余的元素全部复制到新数组。</li>\n<li>将合并后的新数组复<strong>制回原数组</strong>。</li>\n</ul>\n<h2 id=\"注意事项-1\"><a href=\"#注意事项-1\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ul>\n<li>递归时需要确保左右部分的区间划分正确。</li>\n<li><strong>时间复杂度</strong><code>O(nlogn)</code></li>\n</ul>\n<h3 id=\"代码：-1\"><a href=\"#代码：-1\" class=\"headerlink\" title=\"代码：\"></a>代码：</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e6</span> + <span class=\"number\">10</span>; <span class=\"comment\">// 根据具体题目定数量级</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> tmp[N]; <span class=\"comment\">// 用来临时存归并完的数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">merge_sort</span><span class=\"params\">(<span class=\"type\">int</span> q[], <span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (l &gt;= r) <span class=\"keyword\">return</span>; <span class=\"comment\">// 排序完成,返回</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"type\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 排序好子区间</span></span><br><span class=\"line\">\t<span class=\"built_in\">merge_sort</span>(q, l, mid), <span class=\"built_in\">merge_sort</span>(q, mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 合并</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> i = l, j = mid + <span class=\"number\">1</span>, k = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> tmp[N];</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (q[i] &lt;= q[j]) tmp[k ++ ] = q[i ++ ];</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> tmp[k ++ ] = q[j ++ ];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (i &lt;= mid) tmp[k ++ ] = q[i ++ ];</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (j &lt;= r) tmp[k ++ ] = q[j ++ ];</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 把排完序的数组拷贝回去</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = l, k = <span class=\"number\">0</span>; i &lt;= r;) q[i ++ ] = q[k ++ ];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>归并排序在大一的程设中也有出现喔，这里贴个图模拟一下排序的流程~</strong></p>\n<p><img src=\"https://cdn.acwing.com/media/article/image/2022/02/12/126788_a197b4168b-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F1.png\" alt=\"归并排序1.png\"></p>\n<h3 id=\"排序模板题：\"><a href=\"#排序模板题：\" class=\"headerlink\" title=\"排序模板题：\"></a>排序模板题：</h3><p><strong><a href=\"https://www.luogu.com.cn/problem/P1177\">洛谷 P1177 归并排序</a></strong></p>\n<p><strong><a href=\"https://www.luogu.com.cn/problem/P1908\">洛谷P1908 逆序对</a></strong></p>\n","text":"1.快速排序对数组 q 在下标 l 到 r 的范围内进行升序排序。 快速排序通过多次的比较和交换，在一趟排序之中确定好选择的基准应该在的位置。这个位置满足的条件...","permalink":"/post/排序","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"算法","slug":"算法","count":19,"path":"api/categories/算法.json"}],"tags":[{"name":"基础算法","slug":"基础算法","count":4,"path":"api/tags/基础算法.json"},{"name":"快速排序","slug":"快速排序","count":1,"path":"api/tags/快速排序.json"},{"name":"归并排序","slug":"归并排序","count":1,"path":"api/tags/归并排序.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">1.快速排序</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8E%92%E5%BA%8F%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">排序思路</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A0%B8%E5%BF%83%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">核心操作</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">注意事项</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%EF%BC%9A\"><span class=\"toc-text\">代码：</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">2.归并排序</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A0%B8%E5%BF%83%E6%80%9D%E6%83%B3\"><span class=\"toc-text\">核心思想</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8E%92%E5%BA%8F%E6%80%9D%E8%B7%AF-1\"><span class=\"toc-text\">排序思路</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A0%B8%E5%BF%83%E6%93%8D%E4%BD%9C-1\"><span class=\"toc-text\">核心操作</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9-1\"><span class=\"toc-text\">注意事项</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%EF%BC%9A-1\"><span class=\"toc-text\">代码：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8E%92%E5%BA%8F%E6%A8%A1%E6%9D%BF%E9%A2%98%EF%BC%9A\"><span class=\"toc-text\">排序模板题：</span></a></li></ol></li></ol></li></ol>","author":{"name":"Jerry","slug":"blog-author","avatar":"https://th.bing.com/th/id/R.7a1adf834060c41d2d476af2a5e322fd?rik=N35%2fqYx%2fr4RSog&riu=http%3a%2f%2fimg.keaiming.com%2fuploads%2fallimg%2f2020090111%2fsvaseyx4m3v.jpg&ehk=EBywhQ9emNaCt5dbn%2b%2fxbUc5yK42H8b%2ffRDsZKdVI6I%3d&risl=&pid=ImgRaw&r=0","link":"/","description":"<strong>Keep a single spark to start a prairie fire.</strong>","socials":{"github":"https://github.com/Jerrylingj","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/2301_79143568?spm=1010.2135.3001.5343","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"二分","uid":"8038215b5c2b5aa82664c7d7c50d2cdc","slug":"二分","date":"2024-09-26T02:50:13.000Z","updated":"2024-10-16T14:19:42.345Z","comments":true,"path":"api/articles/二分.json","cover":"https://n.sinaimg.cn/sinacn10112/181/w1550h1031/20191218/3315-ikvenft9359266.jpg","text":"二分 注意 ❗❗❗❗二分查找的前提是被查找的数据必须有二段性 如何理解这句话呢？ 举个例子，在数组[1, 5 , 8, 9, 23, 25, 40]里找9 我可...","permalink":"/post/二分","photos":[],"count_time":{"symbolsCount":"5.1k","symbolsTime":"5 mins."},"categories":[{"name":"算法","slug":"算法","count":19,"path":"api/categories/算法.json"}],"tags":[{"name":"基础算法","slug":"基础算法","count":4,"path":"api/tags/基础算法.json"},{"name":"二分","slug":"二分","count":1,"path":"api/tags/二分.json"}],"author":{"name":"Jerry","slug":"blog-author","avatar":"https://th.bing.com/th/id/R.7a1adf834060c41d2d476af2a5e322fd?rik=N35%2fqYx%2fr4RSog&riu=http%3a%2f%2fimg.keaiming.com%2fuploads%2fallimg%2f2020090111%2fsvaseyx4m3v.jpg&ehk=EBywhQ9emNaCt5dbn%2b%2fxbUc5yK42H8b%2ffRDsZKdVI6I%3d&risl=&pid=ImgRaw&r=0","link":"/","description":"<strong>Keep a single spark to start a prairie fire.</strong>","socials":{"github":"https://github.com/Jerrylingj","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/2301_79143568?spm=1010.2135.3001.5343","juejin":"","customs":{}}}},"next_post":{"title":"近期规划","uid":"b70cb6e2fe5cd3e70bacd823f6f633fc","slug":"近期规划","date":"2024-09-26T01:49:54.000Z","updated":"2024-10-06T15:51:18.313Z","comments":true,"path":"api/articles/近期规划.json","cover":"https://img-baofun.zhhainiao.com/pcwallpaper_ugc/static/50706fe64cbbdddc2c8c99d27eb64d4d.jpeg?x-oss-process=image%2fresize%2cm_lfit%2cw_3840%2ch_2160","text":"欢迎来到我的小天地!...","permalink":"/post/近期规划","photos":[],"count_time":{"symbolsCount":367,"symbolsTime":"1 mins."},"categories":[{"name":"公告","slug":"公告","count":1,"path":"api/categories/公告.json"}],"tags":[],"author":{"name":"Jerry","slug":"blog-author","avatar":"https://th.bing.com/th/id/R.7a1adf834060c41d2d476af2a5e322fd?rik=N35%2fqYx%2fr4RSog&riu=http%3a%2f%2fimg.keaiming.com%2fuploads%2fallimg%2f2020090111%2fsvaseyx4m3v.jpg&ehk=EBywhQ9emNaCt5dbn%2b%2fxbUc5yK42H8b%2ffRDsZKdVI6I%3d&risl=&pid=ImgRaw&r=0","link":"/","description":"<strong>Keep a single spark to start a prairie fire.</strong>","socials":{"github":"https://github.com/Jerrylingj","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/2301_79143568?spm=1010.2135.3001.5343","juejin":"","customs":{}}},"feature":true}}